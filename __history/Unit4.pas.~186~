// rossouw nel
unit Unit4;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.ComCtrls, Math, Vcl.StdCtrls,
  Vcl.ExtCtrls, Vcl.Samples.Spin, Vcl.Imaging.pngimage, shellapi;

type
  TForm4 = class(TForm)
    PageControl1: TPageControl;
    tsLogin: TTabSheet;
    tsRegister: TTabSheet;
    tsOptions: TTabSheet;
    pnlLogin: TPanel;
    pnlHeading1: TPanel;
    lblUsername: TLabel;
    lblLPassword: TLabel;
    btnRegister: TButton;
    pnlRegister: TPanel;
    btnReturn: TButton;
    edtLUsername: TEdit;
    edtLPassword: TEdit;
    cbxSH1: TCheckBox;
    btnLogin: TButton;
    pnlHeading2: TPanel;
    btnRLogin: TButton;
    lblRUsername: TLabel;
    lblCPassword: TLabel;
    lblRPassword: TLabel;
    edtRUsername: TEdit;
    edtRPassword: TEdit;
    edtCPassword: TEdit;
    cbxSH2: TCheckBox;
    cbxSHC: TCheckBox;
    pnlOptions: TPanel;
    btnFlashcards: TButton;
    btnTest: TButton;
    btnSim1: TButton;
    btnSim2: TButton;
    btnSim3: TButton;
    pnlHeading3: TPanel;
    tsSim1: TTabSheet;
    pnlSim1: TPanel;
    pnlNH: TPanel;
    pnlSim1Menu: TPanel;
    sedN: TSpinEdit;
    sedH1: TSpinEdit;
    sedNH: TSpinEdit;
    lblN: TLabel;
    lblH1: TLabel;
    lblNH: TLabel;
    lblPlus1: TLabel;
    lblArrow1: TLabel;
    btnNext1: TButton;
    btnFlashcardsMenu1: TButton;
    btnTestMenu1: TButton;
    tsSim2: TTabSheet;
    pnlSim2: TPanel;
    pnlCH: TPanel;
    pnlSim2Menu: TPanel;
    btnNext2: TButton;
    btnPrevious1: TButton;
    btnFlashcardsMenu2: TButton;
    btnTestMenu2: TButton;
    Image1: TImage;
    Image2: TImage;
    sedH2: TSpinEdit;
    sedC: TSpinEdit;
    sedCH: TSpinEdit;
    tsSim3: TTabSheet;
    lblH2: TLabel;
    lblC: TLabel;
    lblCH: TLabel;
    lblPlus2: TLabel;
    lblArrow2: TLabel;
    pnlSim3: TPanel;
    pnlZnClH: TPanel;
    Image3: TImage;
    pnlSim3Menu: TPanel;
    tsFlashcards: TTabSheet;
    btnRevealNH: TButton;
    btnRevealCH: TButton;
    btnRevealZnClH: TButton;
    Image4: TImage;
    Image5: TImage;
    sedHCl: TSpinEdit;
    sedZnCl: TSpinEdit;
    sedH3: TSpinEdit;
    lblZn: TLabel;
    lblHCl: TLabel;
    lblPlus3: TLabel;
    lblZnCl: TLabel;
    lblPlus4: TLabel;
    lblH3: TLabel;
    sedZn: TSpinEdit;
    btnPrevious2: TButton;
    btnFlashcardsMenu3: TButton;
    btnTestMenu3: TButton;
    pnlFlashcard5: TPanel;
    pnlFlashcard2: TPanel;
    pnlFlashcard3: TPanel;
    pnlFlashcard4: TPanel;
    pnlFlashcard1: TPanel;
    btnHint1: TButton;
    lblArrow3: TLabel;
    btnNext: TButton;
    lblQuestion1: TLabel;
    rgpQuestion1: TRadioGroup;
    btnOK: TButton;
    pbxH1: TPaintBox;
    pbxNH: TPaintBox;
    procedure FormCreate(Sender: TObject);
    procedure btnRegisterClick(Sender: TObject);
    procedure btnReturnClick(Sender: TObject);
    procedure cbxSH1Click(Sender: TObject);
    procedure cbxSH2Click(Sender: TObject);
    procedure cbxSHCClick(Sender: TObject);
    procedure btnLoginClick(Sender: TObject);
    procedure btnNext1Click(Sender: TObject);
    procedure btnPrevious1Click(Sender: TObject);
    procedure btnSim1Click(Sender: TObject);
    procedure btnSim2Click(Sender: TObject);
    procedure PageControl1Change(Sender: TObject);
    procedure btnNext2Click(Sender: TObject);
    procedure btnPrevious2Click(Sender: TObject);
    procedure btnFlashcardsClick(Sender: TObject);
    procedure btnOKClick(Sender: TObject);
    procedure btnHint1Click(Sender: TObject);
    procedure btnRLoginClick(Sender: TObject);
    //procedure pbxH1Click(Sender: TObject);
    procedure pbxH1Paint(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure sedH1Change(Sender: TObject);
    procedure sedNHChange(Sender: TObject);
    procedure pbxNHPaint(Sender: TObject);
    procedure sedNChange(Sender: TObject);
    procedure btnRevealNHClick(Sender: TObject);
  private
    { Private declaratio
    Edit1: TEdit;ns }
    procedure ShowOnly(ATab: TTabSheet);
    procedure login();
  public
    { Public declarations }
  end;

var
  Form4: TForm4;
  Username, Password, Progress : string;
  Fields : TstringList;
  LoginSuccesful : Boolean=false;
  Displace1, Displace2, Displace3, Displace : integer;
  

implementation

{$R *.dfm}

procedure TForm4.login();

var
  Users : textfile;
  sLine, FileUsername, FilePassword : String;

begin
 AssignFile(Users,'C:\IT PAT 2025\Users.txt');
 reset(Users);
 Fields := TstringList.Create;
 Fields.Delimiter := '|';
 Fields.StrictDelimiter := True;
 LoginSuccesful := false;

 try
   while not EOF(Users) do
   begin
     ReadLn(Users, sLine);
     Fields.DelimitedText := sLine;
     if Fields.Count = 3 then
     begin
       FileUsername := Fields[0];
       FilePassword := Fields[1];
       Progress := Fields[2];

       if (FileUsername = Username) and (FilePassword = Password) then
       begin
         LoginSuccesful := True;
         Break;
       end;

     end;

   end;

   CloseFile(Users);

   if LoginSuccesful = True then
   begin
     ShowOnly(TsOptions);
   end
   else
   if LoginSuccesful = false then
   begin
   Showmessage('Invalid Username or Password');
   end;

 finally
  Fields.Free;
 end;
 end;



procedure TForm4.ShowOnly(ATab: TTabSheet);
var
  i: Integer;
begin
  for i := 0 to PageControl1.PageCount - 1 do
    PageControl1.Pages[i].TabVisible := (PageControl1.Pages[i] = ATab);
  PageControl1.ActivePage := ATab;

end;

procedure TForm4.PageControl1Change(Sender: TObject);
begin
  ShowOnly(tsOptions);
end;

procedure TForm4.pbxNHPaint(Sender: TObject);

  var
CentreX, CentreY,CIrcle  : integer;
triangle : Array[0..2] Of Tpoint;
stripe : Array[0..1] of TPoint ;
I ,j: Integer ;
begin
displace2 := sedNH.Value*-10;
Displace1 := sedN.Value*20 ;
displace := displace1 + displace2 ;

 CentreX := pbxNH.Width div 2;
 CentreY := pbxNH.Height div 2;

 Triangle[0] := Point(CentreX, CentreY);
 Triangle[1] := Point(CentreX-50, CentreY+80);
 Triangle[2] := Point(CentreX+50, CentreY+80);

 stripe[0] := Point(CentreX - 310, CentreY + Displace);
 stripe[1] := Point(CentreX + 310, CentreY - Displace);

with pbxNH.Canvas do
  begin
   MoveTo(CentreX, CentreY);
   pbxNH.Canvas.Brush.Color := TColor($008C8E);
   pbxNH.Canvas.Pen.Color := clBlack;

   if (displace = 0) and (sedN.Value <>0) then
   begin
    pen.Color := clGreen;
    brush.Color:= clGreen;
   end;
  Circle := 310 ;
  for j := 1 to 2 do
  for I := 0 to sedN.Value-1  do
    begin
     Circle := Circle - 20;
     ellipse(centrex-Circle , CentreY+Displace ,centreX-Circle+20,CentreY-20+Displace)
    end;
   Circle :=130 ;

  for I := 0 to sedNH.Value-1  do
    begin
     Circle := Circle + 20;
     ellipse(centrex+Circle , CentreY-Displace ,centreX+Circle-20,CentreY-20-Displace)
    end;
   pbxNH.Canvas.Polygon(Stripe);
   pbxNH.Canvas.Polygon(Triangle);

end;
end;



procedure TForm4.pbxH1Paint(Sender: TObject);


  var
CentreX, CentreY,CIrcle  : integer;
triangle : Array[0..2] Of Tpoint;
stripe : Array[0..1] of TPoint ;
I ,j: Integer ;
begin
displace2 := sedNH.Value*-15;
Displace1 := sedH1.Value*10 ;
displace := displace1 + displace2 ;

 CentreX := pbxH1.Width div 2;
 CentreY := pbxH1.Height div 2;

 Triangle[0] := Point(CentreX, CentreY);
 Triangle[1] := Point(CentreX-50, CentreY+80);
 Triangle[2] := Point(CentreX+50, CentreY+80);

 stripe[0] := Point(CentreX - 310, CentreY + Displace);
 stripe[1] := Point(CentreX + 310, CentreY - Displace);

with pbxH1.Canvas do
  begin
   MoveTo(CentreX, CentreY);
   pbxH1.Canvas.Brush.Color := RGB (44, 117, 255);
   pbxH1.Canvas.Pen.Color := clBlack;

   if (displace = 0) and (sedH1.Value <>0) then
   begin
    pen.Color := clGreen;
    brush.Color:= clGreen;
   end;
  Circle := 310 ;
  for j := 1 to 2 do
  for I := 0 to sedH1.Value-1  do
    begin
     Circle := Circle - 20;
     ellipse(centrex-Circle , CentreY+Displace ,centreX-Circle+20,CentreY-20+Displace)
    end;
   Circle :=130 ;
    for j := 1 to 3 do
  for I := 0 to sedNH.Value-1  do
    begin
     Circle := Circle + 20;
     ellipse(centrex+Circle , CentreY-Displace ,centreX+Circle-20,CentreY-20-Displace)
    end;
   pbxH1.Canvas.Polygon(Stripe);
   pbxH1.Canvas.Polygon(Triangle);
  end;


end;


procedure TForm4.sedH1Change(Sender: TObject);
begin


  pbxH1.Repaint ;
end;

procedure TForm4.sedNChange(Sender: TObject);
begin
 pbxNH.Repaint ;
end;

procedure TForm4.sedNHChange(Sender: TObject);
begin
pbxNH.Repaint ;
pbxH1.Repaint ;
end;

procedure TForm4.btnFlashcardsClick(Sender: TObject);
begin
 ShowOnly(tsFlashcards);
end;

procedure TForm4.btnHint1Click(Sender: TObject);
begin
  ShowMessage('Hint: Balance the number of H and O atoms on both sides of the equation.');
end;
//================================================================================
procedure TForm4.btnLoginClick(Sender: TObject);
 begin
 Password := edtLPassword.text;
 Username := edtLUsername.text;

 Login;

 end;

//================================================================================
procedure TForm4.btnNext1Click(Sender: TObject);
begin
ShowOnly(tsSim2);
end;

procedure TForm4.btnNext2Click(Sender: TObject);
begin
  ShowOnly(tsSim3);
end;

procedure TForm4.btnOKClick(Sender: TObject);
begin
if strToInt(Progress) = 5 then
begin
 shellexecute(handle, 'open', 'C:\IT PAT 2025\video vir PAT\WhatsApp Video 2025-07-14 at 16.40.05_1b83271f.mp4', nil, nil, SW_SHOWNORMAL);
 exit;
 end;

begin
   if rgpQuestion1.ItemIndex = 1 then
   begin
    ShowMessage('Correct!');
    pnlFlashcard2.Visible := True;
    pnlFlashcard1.Visible := False;
    end
  else
    ShowMessage('Incorrect. Try again!');
end;
end;

procedure TForm4.btnPrevious1Click(Sender: TObject);
begin
  ShowOnly(tsSim1);
end;

procedure TForm4.btnPrevious2Click(Sender: TObject);
begin
  ShowOnly(tsSim2);
end;

procedure TForm4.btnRegisterClick(Sender: TObject);

begin
 ShowOnly(tsRegister);
end;

procedure TForm4.btnReturnClick(Sender: TObject);
begin
  ShowOnly(tsLogin);
end;

procedure TForm4.btnRevealNHClick(Sender: TObject);
begin
sedN.Value := 1;
sedH1.Value := 3;
sedNH.Value := 2;
end;

procedure TForm4.btnRLoginClick(Sender: TObject);
var
Exists : Boolean;
sLine : string;
Fields : TStringList;
Users : TextFile;
begin
if not (edtRPassword.text = edtCPassword.text) then
begin
Showmessage('Passwords don''t match');
Exit
end;

  Exists := False;
  AssignFile(Users, 'C:\IT PAT 2025\Users.txt');
  Reset(Users);
  Username := edtRUsername.text;
  Password := edtRPassword.text;

  Fields := TstringList.Create;
  Fields.Delimiter := '|';
  Fields.StrictDelimiter := True;

  TRY
    while not EOF(Users) do
    begin
      readLn(Users, sLine);
      Fields.DelimitedText := sLine;
      if (Fields.count >= 1) and (Fields[0] = Username) then
      begin
        Showmessage('Username already exists');
        CloseFile(Users);
        Exists := True;
        Exit
      end;
    end;

    CloseFile(Users);

    AssignFile(Users, 'C:\IT PAT 2025\Users.txt');
    Append(Users);
    WriteLn(Users, Username + '|' + Password + '|' + '0');
    CloseFile(Users);

    if Exists = false then
    begin
      Login;
    end;
  FINALLY
    Fields.Free;
  END;

Login
end;

procedure TForm4.btnSim1Click(Sender: TObject);
begin
  ShowOnly(tsSim1);
end;

procedure TForm4.btnSim2Click(Sender: TObject);
begin
  ShowOnly(tsSim2);
end;

procedure TForm4.Button1Click(Sender: TObject);
begin
pbxH1.Repaint ;
end;

procedure TForm4.cbxSH1Click(Sender: TObject);
begin
  if cbxSH1.Checked then
    edtLPassword.PasswordChar := #0  // hierdie sal die teks wys wat ingetik word
  else
    edtLPassword.PasswordChar := '*' // steek weg wat mens tik met 'n *
end;

procedure TForm4.cbxSH2Click(Sender: TObject);
begin
  if cbxSH2.Checked then
    edtRPassword.PasswordChar := #0  // hierdie sal die teks wys wat ingetik word
  else
    edtRPassword.PasswordChar := '*' // steek weg wat mens tik met 'n *
end;

procedure TForm4.cbxSHCClick(Sender: TObject);
begin
  if cbxSHC.Checked then
    edtCPassword.PasswordChar := #0  // hierdie sal die teks wys wat ingetik word
  else
    edtCPassword.PasswordChar := '*' // steek weg wat mens tik met 'n *
end;

procedure TForm4.FormCreate(Sender: TObject);
begin
  tsLogin.caption := 'Login';
  tsRegister.caption := 'Register';
  tsOptions.caption := 'Options';
  tsSim1.caption := 'Simulation 1';
  tsSim2.caption := 'Simulation 2';
  tsSim3.caption := 'Simulation 3';
  // tsLogin
  pnlLogin.caption := '';
  pnlHeading1.caption := 'Login or Sign up';
  pnlHeading1.font.size := 15;
  lblUsername.font.size := 10;
  lblLPassword.font.size := 10;

  lblUsername.caption := 'Username';
  lblLPassword.caption := 'Password';

  edtLUsername.text := '';
  edtLPassword.text := '';
  edtLPassword.PasswordChar := '*';

  cbxSH1.caption := 'show/hide';

  btnRegister.caption := 'Sign up';
  btnLogin.caption := 'Login';
  // tsRegister
  pnlRegister.caption := '';
  pnlHeading2.caption := 'Sign Up';
  pnlHeading2.font.size := 15;
  lblRUsername.font.size := 10;
  lblRPassword.font.size := 10;
  lblCPassword.font.size := 10;

  lblRUsername.caption := 'Username';
  lblRPassword.caption := 'Password';
  lblCPassword.caption := 'Confirm Password';

  edtRUsername.text := '';
  edtRPassword.text := '';
  edtCPassword.text := '';
  edtRPassword.PasswordChar := '*';
  edtCPassword.PasswordChar := '*';
  // tsOptions
  pnlOptions.caption := '';
  pnlHeading3.caption := 'Menu';
  pnlHeading3.font.size := 25;

  btnSim1.caption := 'Simulation 1';
  btnSim2.caption := 'Simulation 2';
  btnSim3.caption := 'Simulation 3';
  btnFlashcards.caption := 'Flashcards';
  btnTest.caption := 'Test';
  //  Simulation 1
  pnlSim1.caption := '';
  pnlNH.caption := '';
  pnlSim1Menu.caption := '';
  pnlNH.Brush.color := clSkyBlue;
  pnlSim1Menu.brush.color := clMenuHighlight;

  sedN.font.size := 30;
  sedH1.font.size := 30;
  sedNH.font.size := 30;
  sedN.MaxValue := 3;
  sedH1.MaxValue := 3;
  sedNH.MaxValue := 3;

  lblN.caption := 'N₂-Molekules';
  lblH1.caption := 'H₂-Molekules';
  lblNH.caption := 'NH₃-Molekules';
  lblPlus1.caption := '+';
  lblArrow1.caption := '→';
  lblN.Font.Size := 14;
  lblH1.Font.Size := 14;
  lblNH.Font.Size := 14;
  lblPlus1.Font.Size := 25;
  lblArrow1.Font.Size := 25;

  btnRevealNH.caption := 'Reveal';
  btnNext1.Caption := 'Next';
  btnFlashcardsMenu1.Caption := 'Flashcards';
  btnTestMenu1.Caption := 'Test';
  // Simulation 2
  pnlSim2.caption := '';
  pnlCH.caption := '';
  pnlSim2Menu.caption := '';
  pnlCH.Brush.color := clSkyBlue;
  pnlSim2Menu.brush.color := clMenuHighlight;

  btnNext2.Caption := 'Next';
  btnPrevious1.Caption := 'Previous';
  btnFlashcardsMenu2.Caption := 'Flashcards';
  btnTestMenu2.Caption := 'Test';
  btnRevealCH.caption := 'Reveal';

  sedC.font.size := 30;
  sedH2.font.size := 30;
  sedCH.font.size := 30;
  sedC.MaxValue := 3;
  sedH2.MaxValue := 3;
  sedCH.MaxValue := 3;

  lblH2.caption := 'N₂-Molekules';
  lblC.caption := 'C-Molekules';
  lblCH.caption := 'CH₄-Molekules';
  lblPlus2.caption := '+';
  lblArrow2.caption := '→';
  lblH2.Font.Size := 14;
  lblC.Font.Size := 14;
  lblCH.Font.Size := 14;
  lblPlus2.Font.Size := 25;
  lblArrow2.Font.Size := 25;
  // Simulation 3
  pnlSim3.caption := '';
  pnlZnClH.caption := '';
  pnlSim3Menu.caption := '';
  pnlZnClH.Brush.color := clSkyBlue;
  pnlSim3Menu.brush.color := clMenuHighlight;

  btnRevealZnClH.caption := 'Reveal';
  btnPrevious2.caption := 'Previous';
  btnFlashcardsMenu3.caption := 'Flashcards';
  btnTestMenu3.caption := 'Test';

  sedZn.font.size := 30;
  sedHCl.font.size := 30;
  sedZnCl.font.size := 30;
  sedH3.font.size := 30;
  sedZn.MaxValue := 3;
  sedHCl.MaxValue := 3;
  sedZnCl.MaxValue := 3;
  sedH3.MaxValue := 3;

  lblZn.caption := 'Zn-Molekules';
  lblHCl.caption := 'HCl-Molekules';
  lblZnCl.caption := 'ZnCl₂-Molekules';
  lblH3.caption := 'H₂-Molekules';
  lblPlus3.caption := '+';
  lblPlus4.caption := '+';
  lblArrow3.caption := '→';
  lblZn.Font.Size := 14;
  lblHCl.Font.Size := 14;
  lblZnCl.Font.Size := 14;
  lblH3.Font.Size := 14;
  lblPlus3.Font.Size := 25;
  lblPlus4.Font.Size := 25;
  lblArrow3.Font.Size := 25;
  // Flashcards
  pnlFlashcard1.caption := '';
  lblQuestion1.Caption := 'Question 1: What is the balanced form of this equation?' + #13 + 'H₂ + O₂ → H₂O';
  rgpQuestion1.Caption := 'Choose an Option below';
  rgpQuestion1.font.size := 14;

  rgpQuestion1.Items.Clear;
  rgpQuestion1.Items.Add('A. H₂ + O₂ → H₂O');
  rgpQuestion1.Items.Add('B. 2H₂ + O₂ → 2H₂O');  // regte antwoord
  rgpQuestion1.Items.Add('C. H₂ + 2O₂ → 2H₂O');
  rgpQuestion1.Items.Add('D. 2H₂ + 2O₂ → H₂O');
  rgpQuestion1.Items.Add('E. H₂O → H₂ + O₂');
repeat
begin
 sedH1.Value := Random(4);
 sedNH.Value := Random(4);
end;
until sedH1.Value <> 0  ;
end;

end.
